{"version":3,"sources":["../src/DataGrid.js"],"names":["color1","color2","defaultTableStyles","width","border","fontFamily","borderCollapse","boxShadow","defaultCellStyles","padding","fontWeight","DataGridRow","props","data","style","className","cellStyle","cellClassName","onClick","onCellClick","rest","map","dat","i","component","value","propTypes","isRequired","DataGridHeader","background","index","name","DataGrid","indexes","columns","col","nextProps","rowStyle","rowClassName","onRowClick","dats","forEach","d","idx","push","headerClassName","headerStyle","headerCellClassName","headerCellStyle","renderData","activeRow","activeField","onFieldClick","defaultProps"],"mappings":"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","file":"DataGrid.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport { number, object, string, func, shape, arrayOf, array, element } from 'prop-types'\n\nconst color1 = '#f1f1f1'\nconst color2 = '#e9e9e9'\n\nconst defaultTableStyles = {\n  width:          `100%`,\n  border:         `1px solid ${color2}`,\n  fontFamily:     `helvetica`,\n  borderCollapse: `collapse`,\n  boxShadow:      `0 10px 60px rgba(0,0,0,.1)`\n}\n\nconst defaultCellStyles = {\n  padding:    `15px 25px`,\n  fontWeight: `normal`\n}\n\nclass DataGridRow extends PureComponent {\n\n  static propTypes = {\n    data:           array.isRequired,\n    cellStyle:      object,\n    cellClassName:  string,\n    style:          object,\n    className:      string,\n    onClick:        func,\n    onCellClick:    func\n  }\n\n  render () {\n    let {\n      data,\n      style,\n      className,\n      cellStyle,\n      cellClassName,\n      onClick,\n      onCellClick,\n      ...rest\n    } = this.props\n\n    return (\n      <tr\n        {...rest}\n        onClick=  {onClick}\n        className={className}\n        style=    {style}\n      >\n        {data.map((dat, i) => (\n          <th\n            key=      {i}\n            style=    {{...defaultCellStyles, ...cellStyle}}\n            className={cellClassName}\n            onClick={onCellClick}\n          >\n          { dat.component ?\n              <dat.component value={dat.value}/> :\n              dat.value\n          }\n          </th>\n        ))}\n      </tr>\n    )\n  }\n}\n\nclass DataGridHeader extends PureComponent {\n\n  static propTypes = {\n    data:       arrayOf(shape({\n                  name: string,\n                  index: string\n                })).isRequired,\n    style:      object,\n    cellStyle:  object\n  }\n\n  render () {\n    let {\n      data,\n      style,\n      cellStyle,\n      className,\n      cellClassName,\n      ...rest\n    } = this.props\n\n    return (\n      <thead {...rest}>\n          <tr\n            style=    {{background: color1, ...style}}\n            className={className}\n          >\n            {data.map((dat, i) => (\n              <th\n                key=      {dat.index}\n                style=    {{...defaultCellStyles, ...cellStyle}}\n                className={cellClassName}\n              >{dat.name}</th>\n            ))}\n          </tr>\n      </thead>\n    )\n  }\n}\n\nclass DataGrid extends PureComponent {\n\n  static propTypes = {\n    activeRow:          number,\n    activeField:        string,\n    data:               array,\n    columns:            arrayOf(shape({\n                          name: string,\n                          index: string,\n                          component: func\n                        })),\n    onRowClick:         func,\n    onFieldClick:       func,\n    headerStyle:        object,\n    headerCellStyle:    object,\n    rowStyle:           object,\n    cellStyle:          object,\n    headerClassName:    string,\n    headerCellClassName:string,\n    cellClassName:      string,\n    rowClassName:       string\n  }\n\n  static defaultProps = {\n    data: [],\n    columns: []\n  }\n\n  indexes = this.props.columns.map((col, i) => col.index)\n\n  componentWillUpdate (nextProps) {\n    this.indexes = nextProps.columns.map((col, i) => col.index)\n  }\n\n  renderData () {\n    let {\n      data,\n      columns,\n      rowStyle,\n      rowClassName,\n      cellStyle,\n      cellClassName,\n      onRowClick,\n      onCellClick\n    } = this.props\n\n    let {\n      indexes\n    } = this\n\n    let dats = []\n\n    data.forEach((d, i) => {\n      let dat = []\n      indexes.forEach((idx, i) => {\n        dat[i] = {value: d[idx], component: columns[i].component}\n      })\n      dats.push(dat)\n    })\n\n    return dats.map((d, i) => <DataGridRow\n      key=          {i}\n      data=         {d}\n      className=    {rowClassName}\n      style=        {rowStyle}\n      cellStyle=    {cellStyle}\n      cellClassName={cellClassName}\n      onClick=      {onRowClick}\n      onCellClick=  {onCellClick}\n    />)\n  }\n\n  render () {\n    let {\n      columns,\n      style,\n      className,\n      rowStyle,\n      rowClassName,\n      headerClassName,\n      headerStyle,\n      headerCellClassName,\n      headerCellStyle,\n      cellStyle,\n      cellClassName,\n      onRowClick,\n      onCellClick,\n      ...rest\n    } = this.props\n\n    return (\n      <table\n        {...rest}\n        style=    {{...defaultTableStyles, ...style}}\n        className={className}\n      >\n        <DataGridHeader\n          onClick=      {onRowClick}\n          style=        {headerStyle}\n          cellStyle=    {headerCellStyle}\n          cellClassName={headerCellClassName}\n          className=    {headerClassName}\n          data=         {columns}\n        />\n        <tbody>\n          {this.renderData()}\n        </tbody>\n      </table>\n    )\n  }\n}\n\nexport default DataGrid\n"]}